diff --git a/Include/datetime.h b/Include/datetime.h
--- a/Include/datetime.h
+++ b/Include/datetime.h
@@ -178,6 +178,8 @@ typedef struct {
 
 #ifdef Py_BUILD_CORE
 
+#define PyDataTime_STATIC 1
+
 /* Macros for type checking when building the Python core. */
 #define PyDate_Check(op) PyObject_TypeCheck(op, &PyDateTime_DateType)
 #define PyDate_CheckExact(op) (Py_TYPE(op) == &PyDateTime_DateType)
diff --git a/Makefile.pre.in b/Makefile.pre.in
--- a/Makefile.pre.in
+++ b/Makefile.pre.in
@@ -1648,9 +1648,12 @@ profile-removal:
 	rm -rf $(COVERAGE_REPORT)
 
 clobber: clean profile-removal
-	-rm -f $(BUILDPYTHON) $(PGEN) $(LIBRARY) $(LDLIBRARY) $(DLLLIBRARY) \
+	-rm -f $(BUILDPYTHON) $(LIBRARY) $(LDLIBRARY) $(DLLLIBRARY) \
 		tags TAGS \
 		config.cache config.log pyconfig.h Modules/config.c
+ifndef CROSS_COMPILE
+	-rm -f $(PGEN)
+endif
 	-rm -rf build platform
 	-rm -rf $(PYTHONFRAMEWORKDIR)
 	-rm -f python-config.py python-config
diff --git a/Modules/_ctypes/libffi/configure b/Modules/_ctypes/libffi/configure
--- a/Modules/_ctypes/libffi/configure
+++ b/Modules/_ctypes/libffi/configure
@@ -17261,7 +17261,7 @@ case "$host" in
 	TARGETDIR=x86
 	if test $ac_cv_sizeof_size_t = 4; then
 	  case "$host" in
-	    *-gnux32)
+	    *-gnux32 | *-nacl)
 	      TARGET=X86_64
 	      ;;
 	    *)
diff --git a/Modules/_datetimemodule.c b/Modules/_datetimemodule.c
--- a/Modules/_datetimemodule.c
+++ b/Modules/_datetimemodule.c
@@ -11,6 +11,14 @@
 #  include <winsock2.h>         /* struct timeval */
 #endif
 
+#if defined(__native_client__) && !defined(__GLIBC__)
+/* TODO(sbc): remove once this gets fixed:
+ * https://code.google.com/p/nativeclient/issues/detail?id=3737
+ */
+#define timezone _timezone
+#define daylight _daylight
+#endif
+
 /* Differentiate between building the core module and building extension
  * modules.
  */
diff --git a/Modules/_testcapimodule.c b/Modules/_testcapimodule.c
--- a/Modules/_testcapimodule.c
+++ b/Modules/_testcapimodule.c
@@ -2205,6 +2205,9 @@ static int test_run_counter = 0;
 
 static PyObject *
 test_datetime_capi(PyObject *self, PyObject *args) {
+#ifdef PyDataTime_STATIC
+    Py_RETURN_NONE;
+#else
     if (PyDateTimeAPI) {
         if (test_run_counter) {
             /* Probably regrtest.py -R */
@@ -2222,6 +2225,7 @@ test_datetime_capi(PyObject *self, PyObject *args) {
         Py_RETURN_NONE;
     else
         return NULL;
+#endif
 }
 
 
diff --git a/Modules/faulthandler.c b/Modules/faulthandler.c
--- a/Modules/faulthandler.c
+++ b/Modules/faulthandler.c
@@ -21,6 +21,15 @@
 #  define FAULTHANDLER_LATER
 #endif
 
+#ifdef __native_client__
+#  ifndef SA_RESTART
+#    define SA_RESTART 0
+#  endif
+#  ifndef SA_NODEFER
+#    define SA_NODEFER 0
+#  endif
+#endif
+
 #ifndef MS_WINDOWS
    /* register() is useless on Windows, because only SIGSEGV, SIGABRT and
       SIGILL can be handled by the process, and these signals can only be used
diff --git a/Modules/readline.c b/Modules/readline.c
--- a/Modules/readline.c
+++ b/Modules/readline.c
@@ -1180,8 +1180,12 @@ setup_readline(readlinestate *mod_state)
 
 /* Wrapper around GNU readline that handles signals differently. */
 
-
-#if defined(HAVE_RL_CALLBACK) && defined(HAVE_SELECT)
+/*
+ * Don't use the select()-based readline under Native Client. While select()
+ * is available and compile and link time it will fail at runtime under sel_ldr
+ * since there is no IRT/syscall implemenation of select().
+ */
+#if defined(HAVE_RL_CALLBACK) && defined(HAVE_SELECT) && !defined(__native_client__)
 
 static  char *completed_input_string;
 static void
diff --git a/Modules/signalmodule.c b/Modules/signalmodule.c
--- a/Modules/signalmodule.c
+++ b/Modules/signalmodule.c
@@ -32,7 +32,7 @@
 #  define PYPTHREAD_SIGMASK
 #endif
 
-#if defined(PYPTHREAD_SIGMASK) && defined(HAVE_PTHREAD_H)
+#if (defined(PYPTHREAD_SIGMASK) || defined(HAVE_PTHREAD_KILL)) && defined(HAVE_PTHREAD_H)
 #  include <pthread.h>
 #endif
 
diff --git a/Modules/socketmodule.c b/Modules/socketmodule.c
--- a/Modules/socketmodule.c
+++ b/Modules/socketmodule.c
@@ -339,6 +339,14 @@ http://cvsweb.netbsd.org/bsdweb.cgi/src/lib/libc/net/getaddrinfo.c.diff?r1=1.82&
 #  include "addrinfo.h"
 #endif
 
+#if defined(__native_client__) && !defined(__GLIBC__)
+struct iovec {
+  void *iov_base;
+  size_t iov_len;
+};
+#undef CMSG_LEN
+#endif
+
 #ifndef HAVE_INET_PTON
 #if !defined(NTDDI_VERSION) || (NTDDI_VERSION < NTDDI_LONGHORN)
 int inet_pton(int af, const char *src, void *dst);
diff --git a/Modules/timemodule.c b/Modules/timemodule.c
--- a/Modules/timemodule.c
+++ b/Modules/timemodule.c
@@ -2,6 +2,7 @@
 
 #include "Python.h"
 
+
 #include <ctype.h>
 
 #ifdef HAVE_SYS_TIMES_H
@@ -20,6 +21,11 @@
 #include <io.h>
 #endif
 
+#if defined(__native_client__) && !defined(__GLIBC__)
+#define timezone _timezone
+#define daylight _daylight
+#endif
+
 #if defined(__WATCOMC__) && !defined(__QNX__)
 #include <i86.h>
 #else
@@ -30,6 +36,13 @@
 #endif /* MS_WINDOWS */
 #endif /* !__WATCOMC__ || __QNX__ */
 
+#if defined(__native_client__) && !defined(__GLIBC__)
+int clock_settime(clockid_t clk_id, const struct timespec *tp) {
+  errno = EPERM;
+  return -1;
+}
+#endif
+
 /* Forward declarations */
 static int pysleep(_PyTime_t);
 static PyObject* floattime(_Py_clock_info_t *info);
diff --git a/Programs/python.c b/Programs/python.c
--- a/Programs/python.c
+++ b/Programs/python.c
@@ -15,6 +15,22 @@ wmain(int argc, wchar_t **argv)
 }
 #else
 
+#ifdef __native_client__
+#include "nacl_main.h"
+
+#ifdef __arm__
+#define DATA_FILE "_platform_specific/arm/pydata.tar"
+#elif defined __i386__
+#define DATA_FILE "_platform_specific/i686/pydata.tar"
+#elif defined __x86_64__
+#define DATA_FILE "_platform_specific/x86_64/pydata.tar"
+#elif defined __pnacl__
+#define DATA_FILE "pydata.tar"
+#else
+#error "Unknown arch"
+#endif
+#endif
+
 int
 main(int argc, char **argv)
 {
diff --git a/Python/dynload_shlib.c b/Python/dynload_shlib.c
--- a/Python/dynload_shlib.c
+++ b/Python/dynload_shlib.c
@@ -71,6 +71,11 @@ _PyImport_FindSharedFuncptr(const char *prefix,
     PyOS_snprintf(funcname, sizeof(funcname),
                   LEAD_UNDERSCORE "%.20s_%.200s", prefix, shortname);
 
+
+/* Native Client's fstat() imlemenation doesn't set st_dev
+ * and st_ino correctly so disable the dlopen handle cache.
+ * TODO(sbc): fix NaCl's fstat() */
+#ifndef __native_client__
     if (fp != NULL) {
         int i;
         struct _Py_stat_struct status;
@@ -89,6 +94,7 @@ _PyImport_FindSharedFuncptr(const char *prefix,
             handles[nhandles].ino = status.st_ino;
         }
     }
+#endif
 
     dlopenflags = PyThreadState_GET()->interp->dlopenflags;
 
diff --git a/Python/fileutils.c b/Python/fileutils.c
--- a/Python/fileutils.c
+++ b/Python/fileutils.c
@@ -771,6 +771,12 @@ get_inheritable(int fd, int raise)
 
     flags = fcntl(fd, F_GETFD, 0);
     if (flags == -1) {
+#if defined(__native_client__) && !defined(__GLIBC__)
+        /* When running under NaCl within the sel_ldr this fcntl() will always
+           fail.  However we don't want to completely remove this block since
+           fcntl() is emulated using nacl_io when running within chrome. */
+        return 0;
+#endif
         if (raise)
             PyErr_SetFromErrno(PyExc_OSError);
         return -1;
@@ -880,6 +886,12 @@ set_inheritable(int fd, int inheritable, int raise, int *atomic_flag_works)
     /* slow-path: fcntl() requires two syscalls */
     flags = fcntl(fd, F_GETFD);
     if (flags < 0) {
+#if defined(__native_client__) && !defined(__GLIBC__)
+        /* When running under NaCl within the sel_ldr this fcntl() will always
+           fail.  However we don't want to completely remove this block since
+           fcntl() is emulated using nacl_io when running within chrome. */
+        return 0;
+#endif
         if (raise)
             PyErr_SetFromErrno(PyExc_OSError);
         return -1;
diff --git a/Python/getversion.c b/Python/getversion.c
--- a/Python/getversion.c
+++ b/Python/getversion.c
@@ -8,8 +8,8 @@
 const char *
 Py_GetVersion(void)
 {
-	static char version[250];
-	PyOS_snprintf(version, sizeof(version), "%.80s (%.80s) %.80s",
+	static char version[270];
+	PyOS_snprintf(version, sizeof(version), "%.80s (%.80s) %.100s",
 		      PY_VERSION, Py_GetBuildInfo(), Py_GetCompiler());
 	return version;
 }
diff --git a/Python/random.c b/Python/random.c
--- a/Python/random.c
+++ b/Python/random.c
@@ -551,7 +551,12 @@ _PyRandom_Init(void)
     */
 
     env = Py_GETENV("PYTHONHASHSEED");
-    if (env && *env != '\0' && strcmp(env, "random") != 0) {
+
+    if (!env || *env == '\0') {
+        /* On NaCL, randomization doesn't work out of the box, so default to having it off. */
+        memset(secret, 0, secret_size);
+    }
+    else if (env && *env != '\0' && strcmp(env, "random") != 0) {
         char *endptr = env;
         unsigned long seed;
         seed = strtoul(env, &endptr, 10);
diff --git a/Python/thread.c b/Python/thread.c
--- a/Python/thread.c
+++ b/Python/thread.c
@@ -13,9 +13,19 @@
    library (e.g. gnu pth in pthread emulation) */
 # ifdef HAVE_PTHREAD_H
 #  include <pthread.h> /* _POSIX_THREADS */
+#  if defined __native_client__ && !defined _POSIX_THREADS
+     /* Under NaCl newlib neither pthread.h nor unistd.h defines _POSIX_THREADS.
+        However this file expects it to be defined if pthreads are present so we
+        define it here after including pthread.h
+        TODO(sbc): remove this hack once newlib is fixed:
+        https://code.google.com/p/nativeclient/issues/detail?id=3551
+        */
+#    define _POSIX_THREADS
+#  endif
 # endif
 #endif
 
+
 #ifndef DONT_HAVE_STDIO_H
 #include <stdio.h>
 #endif
diff --git a/configure b/configure
--- a/configure
+++ b/configure
@@ -784,6 +784,7 @@ infodir
 docdir
 oldincludedir
 includedir
+runstatedir
 localstatedir
 sharedstatedir
 sysconfdir
@@ -895,6 +896,7 @@ datadir='${datarootdir}'
 sysconfdir='${prefix}/etc'
 sharedstatedir='${prefix}/com'
 localstatedir='${prefix}/var'
+runstatedir='${localstatedir}/run'
 includedir='${prefix}/include'
 oldincludedir='/usr/include'
 docdir='${datarootdir}/doc/${PACKAGE_TARNAME}'
@@ -1147,6 +1149,15 @@ do
   | -silent | --silent | --silen | --sile | --sil)
     silent=yes ;;
 
+  -runstatedir | --runstatedir | --runstatedi | --runstated \
+  | --runstate | --runstat | --runsta | --runst | --runs \
+  | --run | --ru | --r)
+    ac_prev=runstatedir ;;
+  -runstatedir=* | --runstatedir=* | --runstatedi=* | --runstated=* \
+  | --runstate=* | --runstat=* | --runsta=* | --runst=* | --runs=* \
+  | --run=* | --ru=* | --r=*)
+    runstatedir=$ac_optarg ;;
+
   -sbindir | --sbindir | --sbindi | --sbind | --sbin | --sbi | --sb)
     ac_prev=sbindir ;;
   -sbindir=* | --sbindir=* | --sbindi=* | --sbind=* | --sbin=* \
@@ -1284,7 +1295,7 @@ fi
 for ac_var in	exec_prefix prefix bindir sbindir libexecdir datarootdir \
 		datadir sysconfdir sharedstatedir localstatedir includedir \
 		oldincludedir docdir infodir htmldir dvidir pdfdir psdir \
-		libdir localedir mandir
+		libdir localedir mandir runstatedir
 do
   eval ac_val=\$$ac_var
   # Remove trailing slashes.
@@ -1437,6 +1448,7 @@ Fine tuning of the installation directories:
   --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]
   --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]
   --localstatedir=DIR     modifiable single-machine data [PREFIX/var]
+  --runstatedir=DIR       modifiable per-process data [LOCALSTATEDIR/run]
   --libdir=DIR            object code libraries [EPREFIX/lib]
   --includedir=DIR        C header files [PREFIX/include]
   --oldincludedir=DIR     C header files for non-gcc [/usr/include]
@@ -3249,6 +3261,9 @@ then
 	*-*-cygwin*)
 		ac_sys_system=Cygwin
 		;;
+	*-*-nacl*)
+		ac_sys_system=NaCl
+		;;
 	*)
 		# for now, limit cross builds to known configurations
 		MACHDEP="unknown"
@@ -3291,6 +3306,15 @@ if test "$cross_compiling" = yes; then
 			_host_cpu=$host_cpu
 		esac
 		;;
+	*-*-nacl*)
+		case "$host_cpu" in
+		arm*)
+			_host_cpu=arm
+			;;
+		*)
+			_host_cpu=$host_cpu
+		esac
+		;;
 	*-*-cygwin*)
 		_host_cpu=
 		;;
@@ -9264,7 +9288,7 @@ then
 			BLDSHARED="$LDSHARED"
 		fi
 		;;
-	Linux*|GNU*|QNX*)
+	Linux*|GNU*|QNX*|NaCl*)
 		LDSHARED='$(CC) -shared'
 		LDCXXSHARED='$(CXX) -shared';;
 	BSD/OS*/4*)
@@ -9336,7 +9360,7 @@ then
 		 else CCSHARED="+z";
 		 fi;;
 	Linux-android*) ;;
-	Linux*|GNU*) CCSHARED="-fPIC";;
+	Linux*|GNU*|NaCl*) CCSHARED="-fPIC";;
 	BSD/OS*/4*) CCSHARED="-fpic";;
 	FreeBSD*|NetBSD*|OpenBSD*|DragonFly*) CCSHARED="-fPIC";;
 	OpenUNIX*|UnixWare*)
@@ -9370,7 +9394,7 @@ then
 #	    LINKFORSHARED="-Wl,-E -Wl,+s -Wl,+b\$(BINLIBDEST)/lib-dynload";;
 	BSD/OS/4*) LINKFORSHARED="-Xlinker -export-dynamic";;
 	Linux-android*) LINKFORSHARED="-pie -Xlinker -export-dynamic";;
-	Linux*|GNU*) LINKFORSHARED="-Xlinker -export-dynamic";;
+	Linux*|GNU*|NaCl*) LINKFORSHARED="-Xlinker -export-dynamic";;
 	# -u libsys_s pulls in all symbols in libsys
 	Darwin/*)
 		LINKFORSHARED="$extra_undefs -framework CoreFoundation"
diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -379,6 +379,9 @@ then
 	*-*-cygwin*)
 		ac_sys_system=Cygwin
 		;;
+	*-*-nacl*)
+		ac_sys_system=NaCl
+		;;
 	*)
 		# for now, limit cross builds to known configurations
 		MACHDEP="unknown"
@@ -421,6 +424,15 @@ if test "$cross_compiling" = yes; then
 			_host_cpu=$host_cpu
 		esac
 		;;
+	*-*-nacl*)
+		case "$host_cpu" in
+		arm*)
+			_host_cpu=arm
+			;;
+		*)
+			_host_cpu=$host_cpu
+		esac
+		;;
 	*-*-cygwin*)
 		_host_cpu=
 		;;
@@ -2510,7 +2522,7 @@ then
 			BLDSHARED="$LDSHARED"
 		fi
 		;;
-	Linux*|GNU*|QNX*)
+	Linux*|GNU*|QNX*|NaCl*)
 		LDSHARED='$(CC) -shared'
 		LDCXXSHARED='$(CXX) -shared';;
 	BSD/OS*/4*)
@@ -2580,7 +2592,7 @@ then
 		 else CCSHARED="+z";
 		 fi;;
 	Linux-android*) ;;
-	Linux*|GNU*) CCSHARED="-fPIC";;
+	Linux*|GNU*|NaCl*) CCSHARED="-fPIC";;
 	BSD/OS*/4*) CCSHARED="-fpic";;
 	FreeBSD*|NetBSD*|OpenBSD*|DragonFly*) CCSHARED="-fPIC";;
 	OpenUNIX*|UnixWare*)
@@ -2612,7 +2624,7 @@ then
 #	    LINKFORSHARED="-Wl,-E -Wl,+s -Wl,+b\$(BINLIBDEST)/lib-dynload";;
 	BSD/OS/4*) LINKFORSHARED="-Xlinker -export-dynamic";;
 	Linux-android*) LINKFORSHARED="-pie -Xlinker -export-dynamic";;
-	Linux*|GNU*) LINKFORSHARED="-Xlinker -export-dynamic";;
+	Linux*|GNU*|NaCl*) LINKFORSHARED="-Xlinker -export-dynamic";;
 	# -u libsys_s pulls in all symbols in libsys
 	Darwin/*)
 		LINKFORSHARED="$extra_undefs -framework CoreFoundation"
